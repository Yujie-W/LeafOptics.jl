var documenterSearchIndex = {"docs":
[{"location":"#LeafOptics.jl","page":"Home","title":"LeafOptics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Functions to calculate leaf spectra, PAR, and SIF.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"LeafOptics\");","category":"page"},{"location":"API/#LeafOptics","page":"API","title":"LeafOptics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = LeafOptics","category":"page"},{"location":"API/#Leaf-spectra","page":"API","title":"Leaf spectra","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"leaf_spectra!\nleaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, lha::HyperspectralAbsorption{FT}; APAR_car::Bool = true, α::FT=FT(40)) where {FT<:AbstractFloat}\nleaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, ρ_par::FT, ρ_nir::FT, τ_par::FT, τ_nir::FT) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#LeafOptics.leaf_spectra!","page":"API","title":"LeafOptics.leaf_spectra!","text":"This function updates leaf level reflectance, transmittance, and fluorescence spectra related parameters. Supported methods are\n\nleaf_spectra!(bio, wls, lha; APAR_car, α)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/spectra.jl:60.\n\nleaf_spectra!(bio, wls, ρ_par, ρ_nir, τ_par, τ_nir)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/spectra.jl:230.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.leaf_spectra!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralLeafBiophysics{FT}, ClimaCache.WaveLengthSet{FT}, ClimaCache.HyperspectralAbsorption{FT}}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.leaf_spectra!","text":"leaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, lha::HyperspectralAbsorption{FT}; APAR_car::Bool = true, α::FT=FT(40)) where {FT<:AbstractFloat}\n\nUpdate leaf reflectance and transmittance spectra, and fluorescence spectrum matrices, given\n\nbio ClimaCache.HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls ClimaCache.WaveLengthSet type struct that contain wave length bins\nlha ClimaCache.HyperspectralAbsorption type struct that contains absorption characteristic curves\nAPAR_car If true, carotenoid absorption is accounted for in PPAR, default is true\nα Optimum angle of incidence (default is 40° as in PROSPECT-D, SCOPE uses 59°)\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nbio = HyperspectralLeafBiophysics{Float64}(wls);\nlha = HyperspectralAbsorption{Float64}(wls);\nleaf_spectra!(bio, wls, lha);\nleaf_spectra!(bio, wls, lha; APAR_car=false);\nleaf_spectra!(bio, wls, lha; APAR_car=false, α=59.0);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.leaf_spectra!-Union{Tuple{FT}, Tuple{ClimaCache.HyperspectralLeafBiophysics{FT}, ClimaCache.WaveLengthSet{FT}, FT, FT, FT, FT}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.leaf_spectra!","text":"leaf_spectra!(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, ρ_par::FT, ρ_nir::FT, τ_par::FT, τ_nir::FT) where {FT<:AbstractFloat}\n\nUpdate leaf reflectance and transmittance (e.g., prescribe broadband PAR and NIR values), given\n\nbio ClimaCache.HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls ClimaCache.WaveLengthSet type struct that contain wave length bins\nρ_par Reflectance at PAR region\nρ_nir Reflectance at NIR region\nτ_par Transmittance at PAR region\nτ_nir Transmittance at NIR region\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nbio = HyperspectralLeafBiophysics{Float64}(wls);\nleaf_spectra!(bio, wls, 0.1, 0.45, 0.05, 0.25);\n\n\n\n\n\n","category":"method"},{"location":"API/#Leaf-PAR,-APAR,-and-PPAR","page":"API","title":"Leaf PAR, APAR, and PPAR","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"leaf_PAR","category":"page"},{"location":"API/#LeafOptics.leaf_PAR","page":"API","title":"LeafOptics.leaf_PAR","text":"leaf_PAR(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, rad::HyperspectralRadiation{FT}; APAR_car::Bool = true) where {FT<:AbstractFloat}\n\nReturn leaf level PAR, APAR, and PPAR, given\n\nbio ClimaCache.HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls ClimaCache.WaveLengthSet type struct that contains wave length bins\nrad ClimaCache.HyperspectralRadiation type struct that contains incoming radiation information\nAPAR_car If true (default), account carotenoid absorption as PPAR; otherwise, PPAR is only by chlorophyll\n\n\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nbio = HyperspectralLeafBiophysics{Float64}(wls);\nrad = HyperspectralRadiation{Float64}();\npar,apar,ppar = leaf_PAR(bio, wls, rad);\npar,apar,ppar = leaf_PAR(bio, wls, rad; APAR_car=false);\n\n\n\n\n\n","category":"function"},{"location":"API/#Leaf-SIF","page":"API","title":"Leaf SIF","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"leaf_SIF","category":"page"},{"location":"API/#LeafOptics.leaf_SIF","page":"API","title":"LeafOptics.leaf_SIF","text":"leaf_SIF(bio::HyperspectralLeafBiophysics{FT}, wls::WaveLengthSet{FT}, rad::HyperspectralRadiation{FT}, ϕ::FT = FT(0.01); ϕ_photon::Bool = true) where {FT<:AbstractFloat}\n\nReturn the leaf level SIF at backward and forward directions, given\n\nbio ClimaCache.HyperspectralLeafBiophysics type struct that contains leaf biophysical parameters\nwls ClimaCache.WaveLengthSet type struct that contains wave length bins\nrad ClimaCache.HyperspectralRadiation type struct that contains incoming radiation information\nϕ Fluorescence quantum yield\nϕ_photon If true (default), convert photon to photon when computing SIF; otherwise, convert energy to energy\n\n\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nbio = HyperspectralLeafBiophysics{Float64}(wls);\nrad = HyperspectralRadiation{Float64}();\nsif_b,sif_f = leaf_SIF(bio, wls, rad, 0.01);\nsif_b,sif_f = leaf_SIF(bio, wls, rad, 0.01; ϕ_photon=false);\n\n\n\n\n\n","category":"function"},{"location":"API/#Utility-functions","page":"API","title":"Utility functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"average_transmittance\nphoton\nphoton(λ::FT, E::FT) where {FT<:AbstractFloat}\nphoton!\nphoton!(λ::Vector{FT}, E::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}\nphoton!(λ::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\nenergy\nenergy(λ::FT, phot::FT) where {FT<:AbstractFloat}\nenergy!\nenergy!(λ::Vector{FT}, phot::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\nenergy!(λ::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#LeafOptics.average_transmittance","page":"API","title":"LeafOptics.average_transmittance","text":"average_transmittance(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nReturn the average transmittance of isotropic radiation across an interface between two dielectrics, given\n\nα angle of incidence\nnr Index of refraction\n\nReferences\n\nStern (1964) Transmission of isotropic radiation across an interface between two dielectrics. Applied Optics 3(1): 111-113.\nAllen (1973) Transmission of isotropic light across a dielectric surface in two and three dimensions. Journal of the Optical Society of America 63(6): 664-666.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.photon","page":"API","title":"LeafOptics.photon","text":"This function convert energy to photons based the wavelength. Supported methods are\n\nphoton(λ, E)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:45.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.photon-Union{Tuple{FT}, Tuple{FT, FT}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.photon","text":"photon(λ::FT, E::FT) where {FT<:AbstractFloat}\n\nReturn the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy\n\n\n\nExamples\n\nphot = photon(500.0, 0.1);\nphots = photon.([500.0, 400.0], [0.1, 0.1]);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.photon!","page":"API","title":"LeafOptics.photon!","text":"This function convert energy to photons based the wavelength and save it to provided variable (1D+). Supported methods are\n\nphoton!(λ, E, phot)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:88.\n\nphoton!(λ, E)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:117.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.photon!-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, Vector{FT}}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.photon!","text":"photon!(λ::Vector{FT}, E::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy\nphot Mole of photons (variable to save)\n\n\n\nExamples\n\nphots = zeros(2);\nphoton!.([500.0, 400.0], [0.1, 0.1], phots);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.photon!-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.photon!","text":"photon!(λ::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy, will be converted to moles of photons\n\n\n\nExamples\n\nEs = rand(2);\nphoton!.([500.0, 400.0], Es);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.energy","page":"API","title":"LeafOptics.energy","text":"This function convert photons to energy based the wavelength. Supported methods are\n\nenergy(λ, phot)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:164.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.energy-Union{Tuple{FT}, Tuple{FT, FT}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.energy","text":"energy(λ::FT, phot::FT) where {FT<:AbstractFloat}\n\nReturn the energy, given\n\nλ Wave length in [nm], converted to [m] by FAC\nphot Number of moles of photon\n\n\n\nExamples\n\ne = energy(500.0, 0.1);\nes = energy.([500.0, 400.0], [0.1, 0.1]);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.energy!","page":"API","title":"LeafOptics.energy!","text":"This function convert photons to energy based the wavelength and save it to provided variable (1D+). Supported methods are\n\nenergy!(λ, phot, E)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:207.\n\nenergy!(λ, phot)\n\ndefined at /home/runner/work/LeafOptics.jl/LeafOptics.jl/src/photon.jl:236.\n\n\n\n\n\n","category":"function"},{"location":"API/#LeafOptics.energy!-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}, Vector{FT}}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.energy!","text":"energy!(λ::Vector{FT}, phot::Vector{FT}, E::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nphot Mole of photons (variable to save)\nE Joules of energy\n\n\n\nExamples\n\nEs = zeros(2);\nenergy!.([500.0, 400.0], [0.1, 0.1], Es);\n\n\n\n\n\n","category":"method"},{"location":"API/#LeafOptics.energy!-Union{Tuple{FT}, Tuple{Vector{FT}, Vector{FT}}} where FT<:AbstractFloat","page":"API","title":"LeafOptics.energy!","text":"energy!(λ::Vector{FT}, phot::Vector{FT}) where {FT<:AbstractFloat}\n\nCompute and save the number of moles of photons, given\n\nλ Wave length in [nm], converted to [m] by FAC\nE Joules of energy, will be converted to moles of photons\n\n\n\nExamples\n\nphots = rand(2);\nenergy!.([500.0, 400.0], phots);\n\n\n\n\n\n","category":"method"}]
}
